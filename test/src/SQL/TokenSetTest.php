<?php
namespace SQL;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-09-30 at 21:15:28.
 */
class TokenSetTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var TokenSet
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new TokenSet;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers SQL\TokenSet::create
     * @todo   Implement testCreate().
     */
    public function testCreate()
    {
        $obj = $this->object->create("',");
        $this->assertInstanceOf('\SQL\SimpleToken', $obj);
        $tokens = $this->object;
        $AND		= $tokens->create( "'AND"		);
        $this->assertInstanceOf('\SQL\WordToken', $AND);
        $BEGIN		= $tokens->create( "'BEGIN"	);
        $this->assertInstanceOf('\SQL\WordToken', $BEGIN);

        $LIKE		= $tokens->create( "'LIKE"	);
        $NOT 		= $tokens->create( "'NOT"		);
        $this->assertInstanceOf('\SQL\WordToken', $LIKE);
        $this->assertInstanceOf('\SQL\WordToken', $NOT);


        $INTEGER		= $tokens->create( "(small|tiny|big)?int(eger)?");
        $NUMERIC		= $tokens->create( "decimal|numeric|real|double");

        $this->assertInstanceOf('\SQL\RegexToken', $INTEGER);
        $this->assertInstanceOf('\SQL\RegexToken', $NUMERIC);

        $CHAR		= $tokens->create( "(var)?char"				);
        $DATE		= $tokens->create( "date(\\s*\\(.*?\\))?"		);
        $IDENTIFIER	=         $tokens->create( "[a-zA-Z_0-9/\\\\:~]+"		);

        $this->assertInstanceOf('\SQL\RegexToken', $CHAR);
        $this->assertInstanceOf('\SQL\RegexToken', $DATE);
        $this->assertInstanceOf('\SQL\RegexToken', $IDENTIFIER);
    }
}
